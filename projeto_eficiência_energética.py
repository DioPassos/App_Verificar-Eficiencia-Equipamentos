# -*- coding: utf-8 -*-
"""Projeto Eficiência Energética.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1480Z2Yv7wDKSV4gX5d0XaUk2nPwKqg7H

# <font color='Blue'>**Projeto Eficiência**</font>
### <font color='black'>-Dioeliton Passos </font>

### <font color='Red'> Projeto Eficiência Energética </font>



![all text](https://engarrafadormoderno.com.br/wp-content/uploads/2021/02/Materia-principal-Grupo-Petropolis-...-_6-768x513.jpg)

# 1° Definir problema negócio,qual a dor.

-Nosso Foco: Fazer uso de algoritimos de Machine learning nos diversos processos fabris que possam nos auxilar nas tomadas de decisão referente a aficiencia dos diversos tipos de enérgia utilizado na Planta

##### **Fonte dos Dados**

###### **Arquitetura dos Dados** (AD)

* **Equipamento**  : Descrição Equipamento
* **Velocidade**        : Velocidade Equipamento
* **Corrente**: Corrente Elétrica
* **Temperatura** : Valor Temperatura Equipamento
* **Eficiencia**       : Descrição /Clssificação conforme parametros

# 2° Análise Exploratória dos Dados
"""

# Commented out IPython magic to ensure Python compatibility.
# Importando Bibliotecas Essenciais
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
# %matplotlib inline

# Se conectando com os dados - Nesse caso, a Fonte de Dados é um Arquivo
dataset = pd.read_csv('/content/dados_eficiencia.csv')

# Imprime na Tela os primeiros registros
dataset.head()

# Informações do Dataset - Tipo das Variáveis, Quantidade de linhas (registros) e colunas (variáveis/features)
dataset.info()

#Verifica as dimensões do dataset (antes de vírgula são linhas    ,     depois da vírgula são colunas)
dataset.shape

# Cria uma função para imprimir na tela o resultado da função SHAPE
print(f"Dataset tem {dataset.shape[0]} linhas e {dataset.shape[1]} colunas.")

#Estatísticas descritivas das variáveis numéricas
dataset.describe()

# Tabela de Frequência da Variável "risco" - Nossa Classe ou Label ou Target
dataset['Eficiencia'].value_counts()

# Cria um gráfico de barras da variável Target
sns.countplot(dataset['Eficiencia'])

# Check for missing values
dataset.isna().sum()

#Eliminar a coluna de identificação, pois ela não é variável explicativa, é somente a identificação do cliente7
dataset = dataset.drop(columns='Equipamento')

#Printa o dataset na tela
dataset

# Cria um gráfico tipo box and whisker plots (o famoso boxplot)
from matplotlib import pyplot
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
pyplot.show()

#cria um gráfico conhecido como histohrama
dataset.hist()
plt.show()

# Criação do Gráfico de dispersão (scatter) conhecido como pairplot
sns.pairplot(dataset, hue='Eficiencia', kind="reg") # kind=reg é a reta de regressão

# Criação do Gráfico de dispersão sem agregar pelo TARGET
sns.pairplot(dataset,kind="reg")

"""# 3° Pré-Processamento dos Dados"""

#3 Separando as Variáveis de Entrada e Saída do Modelo
X = dataset.iloc[:,:-1].values  #variáveis independentes
y = dataset.iloc[:,-1].values  #Target/labe/class/vairável dependente

#Print das variáveis X e Y
print("\nVariáveis de Entrada da avaliação:\n\n", X[:3])
print("\nEficiencia - Variável a ser Predita :\n\n", y[:3])

X

y

"""### Separando os dados entre Treino e Teste"""

#Divide o dataset em Train and Test 
X_train, X_test, y_train, y_test = train_test_split(X ,y, test_size=0.2, random_state = 7)

print("Dados de Treino :\n----------------\n")
print("X = \n", X_train[:2])
print("y = \n", y_train[:2])

print("\n\nDados de Teste :\n----------------\n")
print("X = \n",X_test[:2])
print("y = \n", y_test[:2])

print(f"Shape dos dados de treino é {X_train.shape}")
print(f"Shape dos dados de teste é {X_test.shape}")

"""### Padronizando as Features - As variáveis explicativas (variáveis de entrada)

"""

#Redimensionando os dados - PADRONIZAÇÂO - Feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test) 

print("\n--------------------------------\nDataset depois da padronização:\n--------------------------------\n", )

print("\nX_train :\n", X_train[:5])
print("-------------------------")
print("\nX_test :\n", X_test[:5])

"""# <font color='Black'> **Construíndo Máquinas Preditivas** </font>

# 4° Construindo a Máquina Preditiva

### 1° Versão da Máquina Preditiva: Criando um **baseline**

Aqui nós vamos criar a primeira versão da Máquina Preditiva. Depois, vamos buscar formas de melhorar a assertividade do modelo.
"""

# Importando a Biblioteca KNN
from sklearn.neighbors import KNeighborsClassifier
Maquina_Preditiva = KNeighborsClassifier(n_neighbors=30) #[1,10,30,50]

#Treinando a Máquina preditiva com os dados de treino
Maquina_Preditiva = Maquina_Preditiva.fit(X_train,y_train)

#Fazendo novas Previsões com os dados de teste
y_pred = Maquina_Preditiva.predict(X_test)


print("\n---------------------------\n")
print("Valores Reais com dados de teste :\n",y_test)

print("\n---------------------------\n")
print("Valores Preditos com a Máquina Preditiva com dados de Teste :\n",y_pred)

#Função que mostra os hyperparâmetros utilizados na construção da Máquina Preditiva 
Maquina_Preditiva.get_params

"""#5° Avaliando a Máquina Preditiva"""

# Calculando a Acurácia
from sklearn import metrics
print("Acurácia da Máquina = ", metrics.accuracy_score(y_test, y_pred)*100)

# Comparando Real e Predito com dados de Teste
print("\nReal vs Predito \n------------------------------\n")
error_df = pd.DataFrame({"Real" : y_test,
                         "Predito" : y_pred})

error_df.head(5)

#Usando a confusion matrix  e o classification report para avaliar a acurácia e demais indicadores
from sklearn.metrics import confusion_matrix, classification_report
from sklearn import metrics

print("Acurácia da Máquina = ", metrics.accuracy_score(y_test, y_pred)*100)
cm = confusion_matrix(y_test,y_pred)
cr = classification_report(y_test, y_pred)
print(cm)
print(cr)

"""### 2° Versão da Máquina Preditiva: Máquina Definitiva """

# Importando a Biblioteca do SVM
from sklearn.svm import SVC
classifier = SVC(kernel='linear',             # ['linear', 'rbf']
                 gamma= 1e-5  ,               # [1e-1, 1e-2, 1e-3, 1e-5]
                 C=10,                        # [10.0, 100.0, 1000.0, 10000.0]
                 random_state=7)

#Treinando a Máquina com o SVC
classifier.fit(X_train,y_train)

#Fazendo novas previsões com os dados de teste
y_pred = classifier.predict(X_test)

print("\n---------------------------\n")
print("Predicted Values for Test Set :\n",y_pred)
print("\n---------------------------\n")
print("Actual Values for Test Set :\n",y_test)

#Imprimindo os hyperparâmetros utilizados na criação da Maquina Preditiva Definitiva
classifier

# Calculando a Acurácia da Máquina Preditiva
from sklearn import metrics
print("Prediction Accuracy = ", metrics.accuracy_score(y_test, y_pred))

# Comparando valores Reais com Preditos pela Máquina
print("\nActual vs Predicted  \n------------------------------\n")
error_df = pd.DataFrame({"Actual" : y_test,
                         "Predicted" : y_pred})

error_df.head(5)

#Usando a confusion matrix e o classification report para avaliar a Máquina
from sklearn.metrics import confusion_matrix, classification_report

cm = confusion_matrix(y_test,y_pred)
cr = classification_report(y_test, y_pred)

# Imprimindo a Confusion Matrix e o Classification Report
print(cm)
print(cr)

"""# <font color='Black'> **- Criando a Aplicação WEB com a Máquina Preditiva** </font>

# <font color='Blue'>6° Deploy - Implementando a Maquina Preditiva na WEB</font>

### ** Implementação do Sistema de Análise de Eficiência:

**1°** o sistema fica em nuvem para ser testado pela área ou manutenção observando o status atual da máquina ou equipamento referente a Eficiencia naquele instante :
*O Teste pode ser realizado na +area com auxilio Tablet,Iphone etc...para auxiliar na tomada de decisão.

# Fim

![alt text](https://miro.medium.com/max/625/1*XBWI6eNVLS_70s1qS46E1w.gif)

## Agradeçemos!
"""